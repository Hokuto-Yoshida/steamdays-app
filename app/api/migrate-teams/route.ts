import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/auth';
import dbConnect from '@/lib/mongodb';
import { Team } from '@/lib/models/Team';

// POST „É°„ÇΩ„ÉÉ„Éâ - Êó¢Â≠ò„ÉÅ„Éº„É†„Å´ editingAllowed „Éï„Ç£„Éº„É´„Éâ„ÇíËøΩÂä†
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    // ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
    if (!session?.user || session.user.role !== 'admin') {
      return NextResponse.json(
        { success: false, error: 'Admin access required' },
        { status: 403 }
      );
    }

    await dbConnect();
    
    // editingAllowed „Éï„Ç£„Éº„É´„Éâ„Åå„Å™„ÅÑ„ÉÅ„Éº„É†„ÇíÊ§úÁ¥¢
    const teamsWithoutEditingAllowed = await Team.find({ 
      editingAllowed: { $exists: false } 
    });

    console.log(`üîÑ ÁßªË°åÂØæË±°„ÉÅ„Éº„É†Êï∞: ${teamsWithoutEditingAllowed.length}`);

    // ÂêÑ„ÉÅ„Éº„É†„Å´ editingAllowed: false „ÇíËøΩÂä†
    const updatePromises = teamsWithoutEditingAllowed.map(team => 
      Team.findByIdAndUpdate(
        team._id,
        { 
          editingAllowed: false, // „Éá„Éï„Ç©„É´„Éà„ÅØÁÑ°Âäπ
          updatedAt: new Date()
        },
        { new: true }
      )
    );

    const updatedTeams = await Promise.all(updatePromises);

    console.log(`‚úÖ ${updatedTeams.length}„ÉÅ„Éº„É†„ÅÆÁßªË°åÂÆå‰∫Ü`);

    return NextResponse.json({
      success: true,
      message: `${updatedTeams.length}„ÉÅ„Éº„É†„Å´ editingAllowed „Éï„Ç£„Éº„É´„Éâ„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü`,
      data: {
        migratedCount: updatedTeams.length,
        teams: updatedTeams.map(team => ({
          id: team.id,
          name: team.name,
          editingAllowed: team.editingAllowed
        }))
      }
    });

  } catch (error) {
    console.error('‚ùå Migration error:', error);
    return NextResponse.json(
      { success: false, error: 'Migration failed' },
      { status: 500 }
    );
  }
}