import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/auth';
import dbConnect from '@/lib/mongodb';
import { Team } from '@/lib/models/Team';

// POST „É°„ÇΩ„ÉÉ„Éâ - ÂÖ®„ÉÅ„Éº„É†„Å´editingAllowed„Éï„Ç£„Éº„É´„Éâ„Çí‰∏ÄÊã¨ËøΩÂä†
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    // ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
    if (!session?.user || session.user.role !== 'admin') {
      return NextResponse.json(
        { success: false, error: 'Admin access required' },
        { status: 403 }
      );
    }

    await dbConnect();
    
    // ÂÖ®„ÉÅ„Éº„É†„ÅÆÁèæÂú®„ÅÆÁä∂Ê≥Å„ÇíÁ¢∫Ë™ç
    const allTeams = await Team.find({});
    console.log(`üìä ÁèæÂú®„ÅÆ„ÉÅ„Éº„É†Êï∞: ${allTeams.length}`);
    
    // editingAllowed„Éï„Ç£„Éº„É´„Éâ„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ„ÉÅ„Éº„É†„ÇíÁâπÂÆö
    const teamsWithoutField = allTeams.filter(team => team.editingAllowed === undefined);
    console.log(`üîß editingAllowed„Éï„Ç£„Éº„É´„Éâ„Åå„Å™„ÅÑ„ÉÅ„Éº„É†: ${teamsWithoutField.length}ÂÄã`);
    
    if (teamsWithoutField.length === 0) {
      return NextResponse.json({
        success: true,
        message: 'ÂÖ®„ÉÅ„Éº„É†„Å´Êó¢„Å´editingAllowed„Éï„Ç£„Éº„É´„Éâ„ÅåÂ≠òÂú®„Åó„Åæ„Åô',
        modifiedCount: 0,
        teamsChecked: allTeams.length
      });
    }
    
    // editingAllowed„Éï„Ç£„Éº„É´„Éâ„Çí‰∏ÄÊã¨ËøΩÂä†Ôºà„Éá„Éï„Ç©„É´„ÉàfalseÔºâ
    const result = await Team.updateMany(
      { editingAllowed: { $exists: false } },
      { $set: { editingAllowed: false } }
    );

    console.log(`‚úÖ editingAllowed„Éï„Ç£„Éº„É´„Éâ„Çí ${result.modifiedCount} ‰ª∂„ÅÆ„ÉÅ„Éº„É†„Å´ËøΩÂä†„Åó„Åæ„Åó„Åü`);
    
    // Êõ¥Êñ∞Âæå„ÅÆÁä∂Ê≥Å„ÇíÁ¢∫Ë™ç
    const updatedTeams = await Team.find({});
    const teamsWithField = updatedTeams.filter(team => team.editingAllowed !== undefined);
    
    return NextResponse.json({
      success: true,
      message: `editingAllowed„Éï„Ç£„Éº„É´„Éâ„Çí ${result.modifiedCount} ‰ª∂„ÅÆ„ÉÅ„Éº„É†„Å´ËøΩÂä†„Åó„Åæ„Åó„Åü`,
      modifiedCount: result.modifiedCount,
      totalTeams: updatedTeams.length,
      teamsWithEditingAllowed: teamsWithField.length,
      details: updatedTeams.map(team => ({
        id: team.id,
        name: team.name,
        editingAllowed: team.editingAllowed
      }))
    });

  } catch (error) {
    console.error('‚ùå Migration error:', error);
    return NextResponse.json(
      { success: false, error: `„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥Â§±Êïó: ${error}` },
      { status: 500 }
    );
  }
}